<?php

// $Id$

 /**
  * @file
  *   A 'basic' implementation of the 'example' service type.
  */

/**
 * A class containing the 'basic' implementation of the 'example' service.
 *
 * This class is conditionally loaded when the "--example_service_type=basic"
 * option is passed to provision-save commands run on servers.
 *
 * The above flag is generated by the hosting counterpart of this class, which
 * provides the front end to configure all these fields.
 *
 * The responsibilities of this class include responding and saving any
 * values that are passed to it, and also to override the portions of
 * the public API for this service that are necessary.
 */
class provisionService_backup_storage_s3 extends provisionService_backup_storage {
 /**
  * Some common options handled upstream by the base service classes.
  */

  function init_server() {
    parent::init_server();
    $this->context->setProperty('backup_storage_locations', array());
  }

  function init_site() {
    parent::init_site();
    $this->context->setProperty('backup_storage_server', '');
    $this->context->setProperty('backup_storage_location_id', '');
  }

  function store_backup($filename) {
    dlm('Store the backup ' . $filename . ' in S3: ' . d()->backup_storage_location_id);
    rename($filename, $filename . '.s3');
    return TRUE;
  }

  function retrieve_backup($filename) {
    dlm('Get the backup file: ' . $filename);
    if (file_exists($filename . '.s3')) {
      rename($filename . '.s3', $filename);
      return TRUE;
    }

    dlm('Could not locate the backup file.');


    return FALSE;
  }

}