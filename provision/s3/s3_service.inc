<?php

// $Id$

 /**
  * @file
  *   A 'basic' implementation of the 'example' service type.
  */

include_once(dirname(__FILE__) . '/includes/S3.php');

/**
 * A class containing the 'basic' implementation of the 'example' service.
 *
 * This class is conditionally loaded when the "--example_service_type=basic"
 * option is passed to provision-save commands run on servers.
 *
 * The above flag is generated by the hosting counterpart of this class, which
 * provides the front end to configure all these fields.
 *
 * The responsibilities of this class include responding and saving any
 * values that are passed to it, and also to override the portions of
 * the public API for this service that are necessary.
 */
class provisionService_backup_storage_s3 extends provisionService_backup_storage {
 /**
  * Some common options handled upstream by the base service classes.
  */

  function init_server() {
    parent::init_server();
    $this->context->setProperty('backup_storage_locations', array());
  }

  function init_site() {
    parent::init_site();
    $this->context->setProperty('backup_storage_server', '');
    $this->context->setProperty('backup_storage_location_id', '');
  }

  function store_backup($filename) {
    dlm(d());
    dlm('Store the backup ' . $filename . ' in S3: ' . d()->backup_storage_location_id);
    if (d(d()->backup_storage_server)->service('backup_storage')->store_object(d()->backup_storage_location_id, $filename)) {
      dlm('Backup completed!');
      return TRUE;
    }

  }

  function delete_backup($filename) {
    dlm('Delete the backup ' . $filename . ' in S3: ' . d()->backup_storage_location_id);
    if (d(d()->backup_storage_server)->service('backup_storage')->remove_object(d()->backup_storage_location_id, $filename)) {
      dlm('Backup delete completed!');
      return TRUE;
    }

  }

  function retrieve_backup($filename) {
    dlm('Get the backup file: ' . $filename);
    if (!file_exists($filename)) {
      // Try to get the file from S3
      if (d(d()->backup_storage_server)->service('backup_storage')->get_object(d()->backup_storage_location_id, $filename)) {
        dlm('Restore completed!');
        return TRUE;
      }

    }



    return FALSE;
  }

  function get_location($location_id) {
    if (isset($this->context->backup_storage_locations[$location_id])) {
      return $this->context->backup_storage_locations[$location_id];
    }
    else {
      return FALSE;
    }
  }

  function get_s3_object($spec = array()) {
    $s3 = new S3($spec['aws_key'], $spec['aws_private']);
    list($bucket_name, ) = explode('/', $spec['aws_bucket'], 2);
    if ($s3->getBucket($bucket_name) !== FALSE) {
      return $s3;
    }
  }

  function store_object($location_id, $filename) {
    $location = $this->get_location($location_id);

    if ($s3 = $this->get_s3_object($location)) {
      $uri = '';
      $location['aws_bucket'] = str_replace('[uri]', d()->uri, $location['aws_bucket']);
      list($bucket_name, $uri) = explode('/', $location['aws_bucket'], 2);
      $uri = rtrim($uri, '/');
      $uri .= '/' . basename($filename);
      $uri = ltrim($uri, '/');
      dlm('$s3->putObject(S3::inputFile(\'' . $filename . '\'), \'' . $bucket_name . '\', \'' . $uri . '\')');
      return $s3->putObject(S3::inputFile($filename), $bucket_name, $uri);
    }

  }

  function get_object($location_id, $filename) {
    $location = $this->get_location($location_id);

    if ($s3 = $this->get_s3_object($location)) {
      $uri = '';
      $location['aws_bucket'] = str_replace('[uri]', d()->uri, $location['aws_bucket']);
      list($bucket_name, $uri) = explode('/', $location['aws_bucket'], 2);
      $uri = rtrim($uri, '/');
      $uri .= '/' . basename($filename);
      $uri = ltrim($uri, '/');
      dlm('$s3->getObject(\'' . $bucket_name . '\', \'' . $uri . '\', \'' . $filename . '\')');
      return $s3->getObject($bucket_name, $uri, $filename);
    }

  }

  function remove_object($location_id, $filename) {
    $location = $this->get_location($location_id);

    if ($s3 = $this->get_s3_object($location)) {
      $uri = '';
      $location['aws_bucket'] = str_replace('[uri]', d()->uri, $location['aws_bucket']);
      list($bucket_name, $uri) = explode('/', $location['aws_bucket'], 2);
      $uri = rtrim($uri, '/');
      $uri .= '/' . basename($filename);
      $uri = ltrim($uri, '/');
      dlm('$s3->deleteObject(\'' . $bucket_name . '\', \'' . $uri . '\')');
      return $s3->deleteObject($bucket_name, $uri);
    }

  }

}